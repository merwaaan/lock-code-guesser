{"mappings":"AAAA,MAAMA,EAAeC,SAASC,cAAc,YAE5C,IAAKF,EACH,MAAM,IAAIG,MAAM,6BAGlB,MAAMC,EAAgBH,SAASC,cAAc,UAE7C,IAAKE,EACH,MAAM,IAAID,MAAM,8BAGlBC,EAAcC,iBAAiB,SAAS,MAIxC,SAAaC,GACXC,QAAQC,IAAI,YAAYF,MAIxB,MAAMG,EAAeH,EAClBI,QAAQ,WAAY,IACpBA,QAAQ,OAAQ,KAChBC,OACAC,MAAM,KAIT,GAFAL,QAAQC,IAAI,mBAAmBC,EAAaI,KAAK,QAEtB,GAAvBJ,EAAaK,OACf,MAAM,IAAIX,MAAM,4BAGlB,MAAMY,EAAaN,EAAa,GAAGK,OAInC,IAFsBL,EAAaO,OAAOC,GAAMA,EAAEH,QAAUC,IAG1D,MAAM,IAAIZ,MAAM,6CAKlB,MAAMe,EAA2B,GAEjC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,IAAcI,EAAG,CACnC,IAAIC,EAAM,EAEV,IAAK,IAAIH,KAAKR,EACZW,GAAOC,SAASJ,EAAEE,IAGpBD,EAAeI,KAAKF,EAAMX,EAAaK,OACzC,CAEAP,QAAQC,IAAI,qBAAqBU,EAAeL,KAAK,QAMrD,MAAMU,EAASC,IACb,IAAID,EAAQ,EAEZ,IAAK,IAAIJ,EAAI,EAAGA,EAAIJ,IAAcI,EAAG,CACnC,MAAMM,EAAaD,EAAKV,OAASK,EAAI,EAErC,IAAIO,EAAQL,SAASG,EAAKC,IAI1BF,GAFmBI,KAAKC,IAAIF,EAAQR,EAAeO,GAGrD,CAIA,OAFAF,GAASA,EAEF,C,KAAEC,E,MAAMD,EAAM,EAOvB,IAAIM,EAJkB,IAAIC,MAAMH,KAAKI,IAAI,GAAIhB,IAAaiB,QACvDC,KAAKhB,GAAMA,EAAEiB,WAAWC,SAASpB,EAAY,OAC7CqB,QAAQnB,IAAOR,EAAa4B,SAASpB,KAERgB,KAAKhB,GAAMM,EAAMN,EAAEiB,cAEnDL,EAAYS,MAAK,CAACC,EAAOC,IAChBD,EAAMhB,MAAQiB,EAAMjB,QAG7BhB,QAAQC,IAAI,eAAgBqB,GAI5B,MAAMY,EAAexC,SAASC,cAAc,SAE5C,IAAKuC,EACH,MAAM,IAAItC,MAAM,6BAGlBsC,EAAaC,UAAY,GAEzB,MAAMC,EAAY,CAACC,EAAcC,EAAcC,GAAS,KACtD,MAAMC,EAAa9C,SAAS+C,cAAc,MAEpCC,EAAchD,SAAS+C,cAAcF,EAAS,KAAO,MAC3DG,EAAYP,UAAYE,EACxBG,EAAWG,YAAYD,GAEvB,MAAME,EAAclD,SAAS+C,cAAcF,EAAS,KAAO,MAC3DK,EAAYT,UAAYG,EACxBM,EAAYC,MAAMC,UAAY,QAC9BN,EAAWG,YAAYC,GAEvBV,EAAaS,YAAYH,EAAA,EAG3BJ,EAAU,cAAe,SAAS,GAElCd,EAAYyB,SAASC,IACnBZ,EAAUY,EAAO/B,KAAM+B,EAAOhC,MAAMW,WAAQ,GAEhD,CA5GEsB,CAAIxD,EAAayD,MAAK","sources":["src/index.ts"],"sourcesContent":["const inputElement = document.querySelector(\"textarea\");\n\nif (!inputElement) {\n  throw new Error(\"Cannot find input element\");\n}\n\nconst buttonElement = document.querySelector(\"button\");\n\nif (!buttonElement) {\n  throw new Error(\"Cannot find button element\");\n}\n\nbuttonElement.addEventListener(\"click\", () => {\n  run(inputElement.value);\n});\n\nfunction run(input: string) {\n  console.log(`input = \"${input}\"`);\n\n  // Validate input\n\n  const sampledCodes = input\n    .replace(/[^\\d\\s]/g, \"\") // Remove non-digits, non-spaces\n    .replace(/\\s+/g, \" \") // Remove redundant spaces\n    .trim()\n    .split(\" \");\n\n  console.log(`sampled codes = ${sampledCodes.join(\" \")}`);\n\n  if (sampledCodes.length == 0) {\n    throw new Error(\"No combinations provided\");\n  }\n\n  const codeLength = sampledCodes[0].length;\n\n  const allSameLength = sampledCodes.every((c) => c.length == codeLength);\n\n  if (!allSameLength) {\n    throw new Error(\"Not all combinations have the same length\");\n  }\n\n  // Compute individual average digit values\n\n  const averagedDigits: number[] = [];\n\n  for (let i = 0; i < codeLength; ++i) {\n    let sum = 0;\n\n    for (let c of sampledCodes) {\n      sum += parseInt(c[i]);\n    }\n\n    averagedDigits.push(sum / sampledCodes.length);\n  }\n\n  console.log(`averaged digits = ${averagedDigits.join(\" \")}`);\n\n  // Score possible combinations\n\n  type ScoredCode = { code: string; score: number };\n\n  const score = (code: string): ScoredCode => {\n    let score = 0;\n\n    for (let i = 0; i < codeLength; ++i) {\n      const digitIndex = code.length - i - 1;\n\n      let digit = parseInt(code[digitIndex]);\n\n      const digitScore = Math.abs(digit - averagedDigits[digitIndex]);\n\n      score += digitScore;\n    }\n\n    score *= score;\n\n    return { code, score };\n  };\n\n  const possibleCodes = [...Array(Math.pow(10, codeLength)).keys()]\n    .map((c) => c.toString().padStart(codeLength, \"0\"))\n    .filter((c) => !sampledCodes.includes(c));\n\n  let scoredCodes = possibleCodes.map((c) => score(c.toString()));\n\n  scoredCodes.sort((code1, code2) => {\n    return code1.score - code2.score;\n  });\n\n  console.log(\"scored codes\", scoredCodes);\n\n  // Display\n\n  const tableElement = document.querySelector(\"table\");\n\n  if (!tableElement) {\n    throw new Error(\"Cannot find table element\");\n  }\n\n  tableElement.innerHTML = \"\";\n\n  const createRow = (col1: string, col2: string, header = false) => {\n    const rowElement = document.createElement(\"tr\");\n\n    const col1Element = document.createElement(header ? \"th\" : \"td\");\n    col1Element.innerHTML = col1;\n    rowElement.appendChild(col1Element);\n\n    const col2Element = document.createElement(header ? \"th\" : \"td\");\n    col2Element.innerHTML = col2;\n    col2Element.style.textAlign = \"right\";\n    rowElement.appendChild(col2Element);\n\n    tableElement.appendChild(rowElement);\n  };\n\n  createRow(\"Combination\", \"Score\", true);\n\n  scoredCodes.forEach((scored) => {\n    createRow(scored.code, scored.score.toString());\n  });\n}\n"],"names":["$b4e14b6b8da86996$var$inputElement","document","querySelector","Error","$b4e14b6b8da86996$var$buttonElement","addEventListener","input","console","log","sampledCodes","replace","trim","split","join","length","codeLength","every","c","averagedDigits","i","sum","parseInt","push","score","code","digitIndex","digit","Math","abs","scoredCodes","Array","pow","keys","map","toString","padStart","filter","includes","sort","code1","code2","tableElement","innerHTML","createRow","col1","col2","header","rowElement","createElement","col1Element","appendChild","col2Element","style","textAlign","forEach","scored","$b4e14b6b8da86996$var$run","value"],"version":3,"file":"index.1e72df64.js.map"}