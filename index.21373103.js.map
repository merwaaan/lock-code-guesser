{"mappings":"AAAA,MAAMA,EAAeC,SAASC,cAAc,YAE5C,IAAKF,EACH,MAAM,IAAIG,MAAM,6BAGlB,MAAMC,EAAgBH,SAASC,cAAc,UAE7C,IAAKE,EACH,MAAM,IAAID,MAAM,8BAGlBC,EAAcC,iBAAiB,SAAS,MAIxC,SAAaC,GACXC,QAAQC,IAAI,YAAYF,MAIxB,MAAMG,EAAeH,EAClBI,QAAQ,WAAY,IACpBA,QAAQ,OAAQ,KAChBC,OACAC,MAAM,KAIT,GAFAL,QAAQC,IAAI,mBAAmBC,EAAaI,KAAK,QAEtB,GAAvBJ,EAAaK,OACf,MAAM,IAAIX,MAAM,4BAGlB,MAAMY,EAAaN,EAAa,GAAGK,OAInC,IAFsBL,EAAaO,OAAOC,GAAMA,EAAEH,QAAUC,IAG1D,MAAM,IAAIZ,MAAM,6CAkBlB,MAAMe,EAAoE,CACxE,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAG9B,IAAK,IAAIC,KAAQV,EACf,IAAK,IAAIW,EAAM,EAAGA,EAAML,IAAcK,EAAK,CACzC,MAAMC,EAAQC,SAASH,EAAKC,MAC1BF,EAAYE,GAAKC,EACrB,CAGFd,QAAQC,IAAI,cAAeU,GAM3B,MAAMK,EAASJ,IACb,IAAII,EAAQ,EAEZ,IAAK,IAAIH,EAAM,EAAGA,EAAML,IAAcK,EAAK,CACzC,MAAMC,EAAQC,SAASH,EAAKC,IAE5B,IAAII,EAAW,EAEf,IAAK,IAAIC,EAAI,EAAGA,EAAI,KAAMA,EAAG,CAC3B,MAAMC,EAAeR,EAAYE,GAAKK,GAEhCE,EAAMC,KAAKD,IAAIN,EAAOI,GACtBI,EAAMD,KAAKC,IAAIR,EAAOI,GAG5BD,GAFiBI,KAAKD,IAAIE,EAAMF,EAAKC,KAAKE,IAAIH,GAAOE,EAAM,MAEpCH,CACzB,CAEAH,GAASC,CACX,CAEA,MAAO,C,KAAEL,E,MAAMI,EAAM,EAOvB,IAAIQ,EAJkB,IAAIC,MAAMJ,KAAKK,IAAI,GAAIlB,IAAamB,QACvDC,KAAKlB,GAAMA,EAAEmB,WAAWC,SAAStB,EAAY,OAC7CuB,QAAQrB,IAAOR,EAAa8B,SAAStB,KAERkB,KAAKlB,GAAMM,EAAMN,EAAEmB,cAEnDL,EAAYS,MAAK,CAACC,EAAOC,IAChBD,EAAMlB,MAAQmB,EAAMnB,QAG7BhB,QAAQC,IAAI,eAAgBuB,GAI5B,MAAMY,EAAe1C,SAASC,cAAc,SAE5C,IAAKyC,EACH,MAAM,IAAIxC,MAAM,6BAGlBwC,EAAaC,UAAY,GAEzB,MAAMC,EAAY,CAACC,EAAcC,EAAcC,GAAS,KACtD,MAAMC,EAAahD,SAASiD,cAAc,MAEpCC,EAAclD,SAASiD,cAAcF,EAAS,KAAO,MAC3DG,EAAYP,UAAYE,EACxBG,EAAWG,YAAYD,GAEvB,MAAME,EAAcpD,SAASiD,cAAcF,EAAS,KAAO,MAC3DK,EAAYT,UAAYG,EACxBM,EAAYC,MAAMC,UAAY,QAC9BN,EAAWG,YAAYC,GAEvBV,EAAaS,YAAYH,EAAA,EAG3BJ,EAAU,cAAe,SAAS,GAElCd,EAAYyB,SAASC,IACnBZ,EAAUY,EAAOtC,KAAMsC,EAAOlC,MAAMa,WAAQ,GAEhD,CAjIEsB,CAAI1D,EAAa2D,MAAK","sources":["src/index.ts"],"sourcesContent":["const inputElement = document.querySelector(\"textarea\");\n\nif (!inputElement) {\n  throw new Error(\"Cannot find input element\");\n}\n\nconst buttonElement = document.querySelector(\"button\");\n\nif (!buttonElement) {\n  throw new Error(\"Cannot find button element\");\n}\n\nbuttonElement.addEventListener(\"click\", () => {\n  run(inputElement.value);\n});\n\nfunction run(input: string) {\n  console.log(`input = \"${input}\"`);\n\n  // Validate input\n\n  const sampledCodes = input\n    .replace(/[^\\d\\s]/g, \"\") // Remove non-digits, non-spaces\n    .replace(/\\s+/g, \" \") // Remove redundant spaces\n    .trim()\n    .split(\" \");\n\n  console.log(`sampled codes = ${sampledCodes.join(\" \")}`);\n\n  if (sampledCodes.length == 0) {\n    throw new Error(\"No combinations provided\");\n  }\n\n  const codeLength = sampledCodes[0].length;\n\n  const allSameLength = sampledCodes.every((c) => c.length == codeLength);\n\n  if (!allSameLength) {\n    throw new Error(\"Not all combinations have the same length\");\n  }\n\n  // Count occurrences for each position\n\n  type Occurrences = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n  ];\n\n  const occurrences: [Occurrences, Occurrences, Occurrences, Occurrences] = [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  ];\n\n  for (let code of sampledCodes) {\n    for (let pos = 0; pos < codeLength; ++pos) {\n      const digit = parseInt(code[pos]);\n      ++occurrences[pos][digit];\n    }\n  }\n\n  console.log(\"occurrences\", occurrences);\n\n  // Score possible combinations\n\n  type ScoredCode = { code: string; score: number };\n\n  const score = (code: string): ScoredCode => {\n    let score = 0;\n\n    for (let pos = 0; pos < codeLength; ++pos) {\n      const digit = parseInt(code[pos]);\n\n      let posScore = 0;\n\n      for (let n = 0; n < 10; ++n) {\n        const nOccurrences = occurrences[pos][n];\n\n        const min = Math.min(digit, n);\n        const max = Math.max(digit, n);\n        const distance = Math.min(max - min, Math.abs(min - (max - 10)));\n\n        posScore += distance * nOccurrences;\n      }\n\n      score += posScore;\n    }\n\n    return { code, score };\n  };\n\n  const possibleCodes = [...Array(Math.pow(10, codeLength)).keys()]\n    .map((c) => c.toString().padStart(codeLength, \"0\"))\n    .filter((c) => !sampledCodes.includes(c));\n\n  let scoredCodes = possibleCodes.map((c) => score(c.toString()));\n\n  scoredCodes.sort((code1, code2) => {\n    return code1.score - code2.score;\n  });\n\n  console.log(\"scored codes\", scoredCodes);\n\n  // Display\n\n  const tableElement = document.querySelector(\"table\");\n\n  if (!tableElement) {\n    throw new Error(\"Cannot find table element\");\n  }\n\n  tableElement.innerHTML = \"\";\n\n  const createRow = (col1: string, col2: string, header = false) => {\n    const rowElement = document.createElement(\"tr\");\n\n    const col1Element = document.createElement(header ? \"th\" : \"td\");\n    col1Element.innerHTML = col1;\n    rowElement.appendChild(col1Element);\n\n    const col2Element = document.createElement(header ? \"th\" : \"td\");\n    col2Element.innerHTML = col2;\n    col2Element.style.textAlign = \"right\";\n    rowElement.appendChild(col2Element);\n\n    tableElement.appendChild(rowElement);\n  };\n\n  createRow(\"Combination\", \"Score\", true);\n\n  scoredCodes.forEach((scored) => {\n    createRow(scored.code, scored.score.toString());\n  });\n}\n"],"names":["$b4e14b6b8da86996$var$inputElement","document","querySelector","Error","$b4e14b6b8da86996$var$buttonElement","addEventListener","input","console","log","sampledCodes","replace","trim","split","join","length","codeLength","every","c","occurrences","code","pos","digit","parseInt","score","posScore","n","nOccurrences","min","Math","max","abs","scoredCodes","Array","pow","keys","map","toString","padStart","filter","includes","sort","code1","code2","tableElement","innerHTML","createRow","col1","col2","header","rowElement","createElement","col1Element","appendChild","col2Element","style","textAlign","forEach","scored","$b4e14b6b8da86996$var$run","value"],"version":3,"file":"index.21373103.js.map"}